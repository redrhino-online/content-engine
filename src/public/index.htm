<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Content Engine</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.5.10/dist/vuetify.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.5.10/dist/vuetify.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        .responsive-container {
            max-width: 100%;
            margin: 10px auto;
        }

        @media (min-width: 600px) {
            .responsive-container {
                max-width: 60vw;
            }
        }

        .copy-btn {
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <div id="app">
        <v-app>
            <v-container class="responsive-container">
                <v-form>
                    <v-row>
                        <v-col cols="12" lg="12" sm="12">
                            <v-select v-model="selectedClient" :items="clients" label="Select Client" item-text="title"
                                item-value="value" @change="loadClientData" clearable></v-select>
                        </v-col>
                        <v-col cols="12" lg="2" sm="12">
                            <v-select v-model="selectedInstruction" :items="instructions" label="Select Instruction"
                                item-text="title" item-value="value" return-object @change="saveSelections"
                                clearable></v-select>
                        </v-col>
                        <v-col cols="12" lg="2" sm="12">
                            <v-select v-model="selectedTone" :items="tones" label="Select Tone" @change="saveSelections"
                                clearable></v-select>
                        </v-col>
                        <v-col cols="12" lg="2" sm="12">
                            <v-select v-model="selectedAudience" :items="audiences" label="Select Audience"
                                item-text="title" item-value="value" return-object @change="saveSelections"
                                clearable></v-select>
                        </v-col>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedChallenge" :items="challenges" label="Select Challenge"
                                item-text="title" item-value="value" return-object @change="saveSelections"
                                clearable></v-select>
                        </v-col>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedSymptom" :items="symptoms" label="Select Symptom"
                                item-text="title" item-value="value" return-object @change="saveSelections"
                                clearable></v-select>
                        </v-col>
                    </v-row>
                    <v-row>
                        <v-col cols="12">
                            <v-btn :disabled="isLoading" @click="generateContent" color="green">
                                Generate
                                <v-progress-circular v-if="isLoading" indeterminate color="white"
                                    size="20"></v-progress-circular>
                            </v-btn>
                            <v-btn v-if="responseContent" @click="copyOriginalContent" color="blue" class="ml-2">
                                Copy Content
                            </v-btn>
                            <v-card id="response" class="mt-3" v-html="responseContent"></v-card>
                        </v-col>
                    </v-row>
                    <v-row>
                        <v-col cols="12" class="copy-btn">
                            <v-btn @click="copyToClipboard" color="blue">Copy Prompt</v-btn>
                        </v-col>
                    </v-row>

                    <v-row>
                        <v-col cols="12">
                            <v-btn @click="clearSelections" color="red">Clear All</v-btn>
                        </v-col>
                    </v-row>
                    <v-row>
                        <v-col cols="12">
                            <v-textarea id="prompt" label="Prompt" :value="generatedPrompt" readonly
                                auto-grow></v-textarea>
                        </v-col>
                    </v-row>
                </v-form>
            </v-container>
        </v-app>
    </div>

    <script>
        new Vue({
            el: '#app',
            vuetify: new Vuetify(),
            data() {
                return {
                    selectedAudience: null,
                    selectedChallenge: null,
                    selectedSymptom: null,
                    selectedInstruction: null,
                    selectedTone: null,
                    selectedClient: null,
                    systemContext: null,
                    audiences: [],
                    symptoms: [],
                    challenges: [],
                    instructions: [],
                    clients: [],
                    tones: ['Compassionate', 'Empathetic', 'Empowering', 'Thought-provoking', 'Reflective', 'Intimate', 'Emotionally charged', 'Optimistic'],
                    isLoading: false,
                    responseContent: '',
                    originalContent: ''
                };
            },
            computed: {
                generatedPrompt() {
                    const parts = [];
                    if (this.selectedTone) parts.push(`Writing Tone: ${this.selectedTone}.`);
                    if (this.selectedAudience) parts.push(`Audience: ${this.selectedAudience.value}.`);
                    if (this.selectedChallenge) parts.push(`Context: ${this.selectedChallenge.value}.`);
                    if (this.selectedSymptom) parts.push(`Symptom: ${this.selectedSymptom.value}.`);
                    if (this.selectedInstruction) parts.push(`Instructions: ${this.selectedInstruction.value}.`);
                    return parts.join('\n');
                }
            },
            methods: {
                async generateContent() {
                    this.isLoading = true;
                    this.responseContent = '';

                    try {
                        const response = await fetch('/generate', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                prompt: this.generatedPrompt,
                                system: this.systemContext
                            })
                        });

                        const data = await response.json();
                        this.originalContent = data.content;
                        this.responseContent = marked.parse(this.originalContent);
                    } catch (error) {
                        this.responseContent = 'Error generating response';
                    } finally {
                        this.isLoading = false;
                    }
                },
                copyOriginalContent() {
                    navigator.clipboard.writeText(this.originalContent).then(() => {
                        alert('Content copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy content: ', err);
                    });
                },
                clearSelections() {
                    this.selectedClient = null;
                    this.selectedAudience = null;
                    this.selectedChallenge = null;
                    this.selectedInstruction = null;
                    this.selectedSymptom = null;
                    this.selectedTone = null;
                    this.systemContext = null
                    this.audiences = [];
                    this.symptoms = [];
                    this.challenges = [];
                    this.instructions = [];
                    const responseDiv = document.getElementById('response');
                    responseDiv.innerHTML = '';
                    this.saveSelections();
                },
                saveSelections() {
                    localStorage.setItem('selectedClient', this.selectedClient);
                    localStorage.setItem('selectedAudience', JSON.stringify(this.selectedAudience));
                    localStorage.setItem('selectedChallenge', JSON.stringify(this.selectedChallenge));
                    localStorage.setItem('selectedInstruction', JSON.stringify(this.selectedInstruction));
                    localStorage.setItem('selectedSymptom', JSON.stringify(this.selectedSymptom));
                    localStorage.setItem('selectedTone', this.selectedTone);
                    localStorage.setItem('systemContext', this.systemContext);
                },
                async loadClientTitles() {
                    try {
                        const clientFiles = ['tlr', 'tmi'];
                        this.clients = await Promise.all(clientFiles.map(async (client) => {
                            const response = await fetch(`./data/${client}.json`);
                            const data = await response.json();
                            return { title: data.title, value: client };
                        }));
                    } catch (error) {
                        console.error('Error loading client titles:', error);
                    }
                },
                loadSelections() {
                    const client = localStorage.getItem('selectedClient');
                    this.selectedClient = client !== "null" ? client : null;
                    this.loadClientData().then(() => {
                        const audience = localStorage.getItem('selectedAudience');
                        this.selectedAudience = audience !== "null" ? JSON.parse(audience) : null;

                        const challenge = localStorage.getItem('selectedChallenge');
                        this.selectedChallenge = challenge !== "null" ? JSON.parse(challenge) : null;

                        const instruction = localStorage.getItem('selectedInstruction');
                        this.selectedInstruction = instruction !== "null" ? JSON.parse(instruction) : null;

                        const symptom = localStorage.getItem('selectedSymptom');
                        this.selectedSymptom = symptom !== "null" ? JSON.parse(symptom) : null;

                        const systemContext = localStorage.getItem('systemContext');
                        this.systemContext = systemContext !== "null" ? JSON.parse(systemContext) : null;
                    });

                    const tone = localStorage.getItem('selectedTone');
                    this.selectedTone = tone !== "null" ? tone : null;
                },
                async loadClientData() {
                    if (!this.selectedClient) return;

                    try {
                        const response = await fetch(`./data/${this.selectedClient}.json`);
                        const data = await response.json();

                        this.systemContext = data.systemContext;
                        this.audiences = data.audiences.sort((a, b) => a.title.localeCompare(b.title));
                        this.symptoms = data.symptoms.sort((a, b) => a.title.localeCompare(b.title));
                        this.challenges = data.challenges.sort((a, b) => a.title.localeCompare(b.title));
                        this.instructions = data.instructions.sort((a, b) => a.title.localeCompare(b.title));
                    } catch (error) {
                        console.error('Error loading client data:', error);
                    }
                },
                copyToClipboard() {
                    const text = this.generatedPrompt;
                    navigator.clipboard.writeText(text).then(() => {
                        alert('Prompt copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy text: ', err);
                    });
                }
            },
            created() {
                this.loadClientTitles();
                this.loadSelections();
            },
        });

    </script>

</body>

</html>