<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Content Engine</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.5.10/dist/vuetify.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.5.10/dist/vuetify.min.css" rel="stylesheet">
    <style>
        .responsive-container {
            max-width: 100%;
            margin: 10px auto;
        }

        @media (min-width: 600px) {
            .responsive-container {
                max-width: 60vw;
            }
        }

        .copy-btn {
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <div id="app">
        <v-app>
            <v-container class="responsive-container">
                <v-form>
                    <v-row>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedInstruction" :items="instructions" label="Select Instruction"
                                item-text="title" item-value="value" return-object></v-select>
                        </v-col>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedAudience" :items="audiences" label="Select Audience"
                                item-text="title" item-value="value" return-object></v-select>
                        </v-col>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedChallenge" :items="challenges" label="Select Challenge"
                                item-text="title" item-value="value" return-object></v-select>
                        </v-col>
                        <v-col cols="12" lg="3" sm="12">
                            <v-select v-model="selectedSymptom" :items="symptoms" label="Select Symptom"
                                item-text="title" item-value="value" return-object></v-select>
                        </v-col>
                    </v-row>

                    <v-row>
                        <v-col cols="12" lg="6" sm="12">
                            <v-select v-model="selectedTone" :items="tones" label="Select Tone"></v-select>
                        </v-col>

                        <v-col cols="12" lg="6" sm="12">
                            <v-select v-model="selectedMood" :items="moods" label="Select Mood"></v-select>
                        </v-col>
                    </v-row>

                    <v-row>
                        <v-col cols="12" class="copy-btn">
                            <v-btn @click="copyToClipboard" color="blue">Copy Prompt</v-btn>
                        </v-col>
                    </v-row>

                    <v-row>
                        <v-col cols="12">
                            <v-btn @click="clearSelections" color="red">Clear All</v-btn>
                        </v-col>
                    </v-row>

                    <v-row>
                        <v-col cols="12">
                            <v-textarea label="Prompt" :value="generatedPrompt" readonly auto-grow></v-textarea>
                        </v-col>
                    </v-row>
                </v-form>
            </v-container>
        </v-app>
    </div>

    <script src="data.js"></script>
    <script>
        new Vue({
            el: '#app',
            vuetify: new Vuetify(),
            data() {
                return {
                    selectedAudience: null,
                    selectedChallenge: null,
                    selectedSymptom: null,
                    selectedInstruction: null,
                    selectedTone: null,
                    selectedMood: null,
                    audiences: [],
                    symptoms: [],
                    challenges: [],
                    instructions: [],
                    tones: ['Compassionate', 'Empathetic', 'Empowering', 'Thought-provoking'],
                    moods: ['Reflective', 'Intimate', 'Emotionally charged', 'Optimistic']
                };
            },
            computed: {
                generatedPrompt() {
                    const instruction = this.selectedInstruction ? this.selectedInstruction.value : '___';
                    const audience = this.selectedAudience ? this.selectedAudience.value : '___';
                    const challenge = this.selectedChallenge ? this.selectedChallenge.value : '___';
                    const symptom = this.selectedSymptom ? this.selectedSymptom.value : '___';
                    const tone = this.selectedTone ? this.selectedTone : '___';
                    const mood = this.selectedMood ? this.selectedMood : '___';
                    return `Tone: ${tone}.\nMood: ${mood}.\nAudience: ${audience}.\nContext: ${challenge}.\nSymptom: ${symptom}.\nInstructions: ${instruction}`;
                }
            },
            methods: {
                clearSelections() {
                    this.selectedAudience = null;
                    this.selectedChallenge = null;
                    this.selectedInstruction = null;
                    this.selectedSymptom = null;
                    this.selectedTone = null;
                    this.selectedMood = null;
                },
                copyToClipboard() {
                    const text = this.generatedPrompt;
                    navigator.clipboard.writeText(text).then(() => {
                        alert('Prompt copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy text: ', err);
                    });
                }
            },
            created() {
                DataService.getAudiences().then(data => {
                    this.audiences = data.sort((a, b) => a.title.localeCompare(b.title));
                });

                DataService.getSymptoms().then(data => {
                    this.symptoms = data.sort((a, b) => a.title.localeCompare(b.title));
                });

                DataService.getChallenges().then(data => {
                    this.challenges = data.sort((a, b) => a.title.localeCompare(b.title));
                });

                DataService.getInstructions().then(data => {
                    this.instructions = data.sort((a, b) => a.title.localeCompare(b.title));
                });

                // DataService.getTones().then(data => this.tones = data);
                // DataService.getMoods().then(data => this.moods = data);
            }
        });

    </script>

</body>

</html>